@using NewStreamSupporter.Data;
@model MarqueeModel
@{
    var animationLength = (Model.SpeedFactorPerCharacter * Model.Text.Length + Model.SpeedFactor);
}
<!DOCTYPE html>
<html lang="en-us">
<head>
    <title>Marquee</title>
    <style>
        .main-container {
            font-family: sans-serif;
            font-size: 14px;
            overflow: hidden;
            color: @Model.FontColor;
            background-color: @Model.BackgroundColor;
            position: relative;
            border-radius: 15px;
        }

        .hidden {
            opacity: 0;
        }

        p {
            font-size: medium;
            font-weight: bold;
        }

        .marquee-text {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            text-align: center;
            white-space: nowrap;
        }

        .looping {
            animation: marqueeAnimation;
            animation-iteration-count: infinite;
            animation-duration: @($"{animationLength}s");
            animation-timing-function: linear;
        }

        @@keyframes marqueeAnimation {
            0% {
                transform: translateX(100%);
            }

            100% {
                transform: translateX(-100%);
            }
        }

        @@keyframes fadeOut {
            0% {
                opacity: 1;
            }

            100% {
                opacity: 0;
            }
        }

        @@keyframes fadeIn {
            0% {
                opacity: 0;
            }

            100% {
                opacity: 1;
            }
        }

        .fadeOut {
            animation: @($"fadeOut {Model.FadeTime}s;") animation-fill-mode: forwards;
        }

        .fadeIn {
            animation: @($"fadeIn {Model.FadeTime}s;") animation-fill-mode: forwards;
        }
    </style>
    <script>
        const isPermanent = "@Model.Permanent".toLowerCase() === "true";
        const defaultString = "@Model.Text";
        const delay = @Model.Delay;
        const fadeTime = @Model.FadeTime;

        let isActive = false,
            isRunning = false,
            mutex = false;

        let mainContainer,
            marqueeText;


        let showMarqueeTextTimer,
            hideMarqueeTimer,
            stopMarqueeTimer;

        function startMarquee(marqueeText) {
            if (isRunning) {
                console.log("Waiting...");
                return setTimeout(async () => await startMarquee(marqueeText), 1000);
            }
            return new Promise(async (resolve, reject) => {
                isRunning = true;
                if (marqueeText == null) {
                    marqueeText = defaultString;
                }
                await showMarquee();
                let calculatedTime = @animationLength * 1000;
                await setMarqueeText(marqueeText);
                await stopMarquee();
                isRunning = false;
                resolve();
            });
        }

        function setMarqueeText(text) {
            return new Promise((resolve, reject) => {
                const time = @animationLength;
                setTimeout(function () {
                    console.log("Clearing text");
                    clearMarqueeText();
                    resolve();
                }, time * 1000);
                void marqueeText.elementWidth;
                marqueeText.style.animation = "marqueeAnimation " + time + "s";
                marqueeText.style.animationTimingFunction = "linear";
                marqueeText.style.animationFillMode = "forwards";
                marqueeText.innerHTML = text;
            });
        }

        function clearMarqueeText() {
            marqueeText.style.animation = "initial";
            marqueeText.innerHTML = "";
        }

        async function stopMarquee() {
            clearMarqueeText();
            await hideMarquee();
        }

        function showMarquee() {
            return new Promise((resolve, reject) => {
                if (!isActive) activateMarquee();
                if (mainContainer.classList.contains("fadeOut")) mainContainer.classList.remove("fadeOut");
                mainContainer.classList.add("fadeIn");
                setTimeout(function () {
                    resolve();
                }, fadeTime * 1000);
            });
        }

        function hideMarquee() {
            return new Promise((resolve, reject) => {
                if (mainContainer.classList.contains("fadeIn")) mainContainer.classList.remove("fadeIn");
                mainContainer.classList.add("fadeOut");
                setTimeout(function(){
                    resolve();
                }, fadeTime * 1000);
            });
        }

        function activateMarquee() {
            mainContainer.classList.remove("hidden");
            isActive = true;
        }

        function trigger(msg) {
            if(isPermanent){
                return;
            }
            startMarquee(msg);
        }
        
        function sleep(duration){
            return new Promise((resolve, reject) => setTimeout(resolve, duration));
        }

        window.onload = async (ev) => {
            mainContainer = document.getElementsByClassName("main-container")[0];
            marqueeText = document.getElementsByClassName("marquee-text")[0];
            if (isPermanent) {
                if(delay === 0){
                    await showMarquee();
                    marqueeText.classList.add("looping");
                    marqueeText.innerHTML = defaultString;
                }
                else {
                    while(true){
                        await startMarquee();
                        await sleep(delay * 1000);
                    }
                }
            }
        };
    </script>
    <script src="~/microsoft//signalr/dist/browser/signalr.js"></script>
    <script>
        import("/js/component.js").then(res => {
            const signalClient = new res.SignalComponent("@Model.Id", "@Model.OwnerId", "marquee");
            signalClient.setTrigger((arg) => {
                console.log("Triggering marquee with message " + arg);
                trigger(arg);
            });
            signalClient.start();
        });
    </script>
</head>
<body>
    <div class="main-container hidden">
        <p><span>&#8203;</span></p>
        <p class="marquee-text"></p>
    </div>
</body>
</html>